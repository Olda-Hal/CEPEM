// <auto-generated />
using System;
using DatabaseAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DatabaseAPI.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PersonId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DrugCategories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugToDrugCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugToDrugCategories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("EventId");

                    b.ToTable("DrugUses");
                });

            modelBuilder.Entity("DatabaseAPI.Models.EmailHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UsedTo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailHistories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PasswordExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("HappenedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DatabaseAPI.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ExaminationTypeId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("DatabaseAPI.Models.ExaminationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExaminationTypes");
                });

            modelBuilder.Entity("DatabaseAPI.Models.FirstNameHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UsedTo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("FirstNameHistories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("DatabaseAPI.Models.HospitalEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalEmployees");
                });

            modelBuilder.Entity("DatabaseAPI.Models.HospitalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalEquipment");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Injury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("InjuryTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("InjuryTypeId");

                    b.ToTable("Injuries");
                });

            modelBuilder.Entity("DatabaseAPI.Models.InjuryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InjuryTypes");
                });

            modelBuilder.Entity("DatabaseAPI.Models.LastNameHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UsedTo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("LastNameHistories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Alive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DatabaseAPI.Models.PatientSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SymptomId");

                    b.ToTable("PatientSymptoms");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleAfter")
                        .HasColumnType("longtext");

                    b.Property<string>("TitleBefore")
                        .HasColumnType("longtext");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DatabaseAPI.Models.PhoneNumberHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UsedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UsedTo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumberHistories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Pregnancies");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("DatabaseAPI.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("DatabaseAPI.Models.VaccineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VaccineTypes");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Appointment", b =>
                {
                    b.HasOne("DatabaseAPI.Models.HospitalEmployee", "HospitalEmployee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Equipment", "Equipment")
                        .WithMany("Appointments")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("DatabaseAPI.Models.Hospital", "Hospital")
                        .WithMany("Appointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithMany("Appointments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Hospital");

                    b.Navigation("HospitalEmployee");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugToDrugCategory", b =>
                {
                    b.HasOne("DatabaseAPI.Models.DrugCategory", "Category")
                        .WithMany("DrugToDrugCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DatabaseAPI.Models.Drug", "Drug")
                        .WithMany("DrugToDrugCategories")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugUse", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Drug", "Drug")
                        .WithMany("DrugUses")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("DrugUses")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DatabaseAPI.Models.EmailHistory", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithMany("EmailHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Employee", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("DatabaseAPI.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Event", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Comment", "Comment")
                        .WithMany("Events")
                        .HasForeignKey("CommentId");

                    b.HasOne("DatabaseAPI.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Patient", "Patient")
                        .WithMany("Events")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("EventType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Examination", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("Examinations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.ExaminationType", "ExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("ExaminationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ExaminationType");
                });

            modelBuilder.Entity("DatabaseAPI.Models.FirstNameHistory", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithMany("FirstNameHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.HospitalEmployee", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Employee", "Employee")
                        .WithMany("HospitalEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Hospital", "Hospital")
                        .WithMany("HospitalEmployees")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("DatabaseAPI.Models.HospitalEquipment", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Equipment", "Equipment")
                        .WithMany("HospitalEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Hospital", "Hospital")
                        .WithMany("HospitalEquipments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Injury", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("Injuries")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.InjuryType", "InjuryType")
                        .WithMany("Injuries")
                        .HasForeignKey("InjuryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("InjuryType");
                });

            modelBuilder.Entity("DatabaseAPI.Models.LastNameHistory", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithMany("LastNameHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Patient", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Comment", "Comment")
                        .WithMany("Patients")
                        .HasForeignKey("CommentId");

                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithOne("Patient")
                        .HasForeignKey("DatabaseAPI.Models.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.PatientSymptom", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("PatientSymptoms")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Symptom", "Symptom")
                        .WithMany("PatientSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Person", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Comment", "Comment")
                        .WithMany("Persons")
                        .HasForeignKey("CommentId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("DatabaseAPI.Models.PhoneNumberHistory", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Person", "Person")
                        .WithMany("PhoneNumberHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Pregnancy", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("Pregnancies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DatabaseAPI.Models.UserRole", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.Person", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Vaccine", b =>
                {
                    b.HasOne("DatabaseAPI.Models.Event", "Event")
                        .WithMany("Vaccines")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAPI.Models.VaccineType", "VaccineType")
                        .WithMany("Vaccines")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Comment", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Patients");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Drug", b =>
                {
                    b.Navigation("DrugToDrugCategories");

                    b.Navigation("DrugUses");
                });

            modelBuilder.Entity("DatabaseAPI.Models.DrugCategory", b =>
                {
                    b.Navigation("DrugToDrugCategories");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Employee", b =>
                {
                    b.Navigation("HospitalEmployees");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Equipment", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HospitalEquipments");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Event", b =>
                {
                    b.Navigation("DrugUses");

                    b.Navigation("Examinations");

                    b.Navigation("Injuries");

                    b.Navigation("PatientSymptoms");

                    b.Navigation("Pregnancies");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("DatabaseAPI.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("DatabaseAPI.Models.ExaminationType", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Hospital", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HospitalEmployees");

                    b.Navigation("HospitalEquipments");
                });

            modelBuilder.Entity("DatabaseAPI.Models.HospitalEmployee", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DatabaseAPI.Models.InjuryType", b =>
                {
                    b.Navigation("Injuries");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Patient", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Person", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmailHistories");

                    b.Navigation("Employee");

                    b.Navigation("FirstNameHistories");

                    b.Navigation("LastNameHistories");

                    b.Navigation("Patient");

                    b.Navigation("PhoneNumberHistories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DatabaseAPI.Models.Symptom", b =>
                {
                    b.Navigation("PatientSymptoms");
                });

            modelBuilder.Entity("DatabaseAPI.Models.VaccineType", b =>
                {
                    b.Navigation("Vaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
